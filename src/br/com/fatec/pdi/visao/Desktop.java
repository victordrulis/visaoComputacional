package br.com.fatec.pdi.visao;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/*
 * Esta classe é a janela principal do projeto da disciplina Tópicos Especiais em Informática
 * (Processamento de Imagens) da Faculdade de Tecnologia de Mogi das Cruzes - Fatec.
 *
 * INSTRUÇÕES PARA O ALUNO:
 *  - Você deverá incluir itens de menu na barra de menus desta janela e implementar o tratamento
 *    de eventos para eles.
 *    O que o evento deverá fazer? Implementar alguma técnica de processamento de imagens, como
 *    a operação aritmética de adição.
 * 
 *    Na implementação das técnicas, você precisará recuperar a imagem atualmente selecionada
 *    ou mesmo solicitar ao usuário a seleção de algumas imagens. Para tanto, veja as opções seguintes:
 *    > Para recuperar a imagem atualmente selecionada, utilize o método getImagemSelecionada().
 *    > Para exibir uma caixa de seleção de imagens (utilizada para operações que necessitam de mais
 *    de uma imagem, como as operações aritméticas), utilize o método selecionarImagens(). Este método
 *    retorna uma array com as imagens selecionadas.
 * 
 *  Um exemplo de implementação de evento está disponível nos itens de menu "Exemplo 1" e
 *  "Exemplo 2". Os utilize para entender como se manipula uma imagem (como se recupera informações
 *  sobre seus pixels e como se desenha uma nova cor para os pixels).
 * 
 * @author Leandro Luque (Professor) - leandro.luque@gmail.com
 * @version 1.0
 * Created on 02/03/2012, 21:25:48
 */
public class Desktop extends javax.swing.JFrame {

    // Diretório onde o último arquivo de imagem foi aberto. Inicialmente nenhum diretório
    // está selecionado.
    // Utilizado para agilizar o processo de abertura de arquivos.
    private File ultimoDiretorioUtilizado = null;

    // Utilizado na nomeação das imagens criadas (você pode usar se quiser).
    // Veja os exemplos já citados na documentação da classe.
    private static int contador = 1;
    
    /** Creates new form Desktop */
    public Desktop() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdpDesktop = new javax.swing.JDesktopPane();
        mnbMenuPrincipal = new javax.swing.JMenuBar();
        menArquivo = new javax.swing.JMenu();
        menIteAbrir = new javax.swing.JMenuItem();
        menIteSalvarComo = new javax.swing.JMenuItem();
        sepArquivo1 = new javax.swing.JPopupMenu.Separator();
        menIteSair = new javax.swing.JMenuItem();
        menExemplo = new javax.swing.JMenu();
        menIteExemplo1 = new javax.swing.JMenuItem();
        menIteExemplo2 = new javax.swing.JMenuItem();
        menOperacoesAritmeticas = new javax.swing.JMenu();
        menIteSoma = new javax.swing.JMenuItem();
        menIteSubtracao = new javax.swing.JMenuItem();
        menIteMultiplicacao = new javax.swing.JMenuItem();
        menIteDivisao = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto da Disciplina \"Tópicos Especiais em Informática\" - Prof. Leandro Luque - Fatec Mogi das Cruzes");

        menArquivo.setMnemonic('A');
        menArquivo.setText("Arquivo");

        menIteAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menIteAbrir.setMnemonic('A');
        menIteAbrir.setText("Abrir imagem");
        menIteAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteAbrirActionPerformed(evt);
            }
        });
        menArquivo.add(menIteAbrir);
        menIteAbrir.getAccessibleContext().setAccessibleDescription("Abre uma nova imagem");

        menIteSalvarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menIteSalvarComo.setMnemonic('S');
        menIteSalvarComo.setText("Salvar imagem como");
        menIteSalvarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteSalvarComoActionPerformed(evt);
            }
        });
        menArquivo.add(menIteSalvarComo);
        menArquivo.add(sepArquivo1);

        menIteSair.setMnemonic('S');
        menIteSair.setText("Sair");
        menIteSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteSairActionPerformed(evt);
            }
        });
        menArquivo.add(menIteSair);

        mnbMenuPrincipal.add(menArquivo);

        menExemplo.setMnemonic('E');
        menExemplo.setText("Exemplo");

        menIteExemplo1.setMnemonic('1');
        menIteExemplo1.setText("Exemplo 1");
        menIteExemplo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteExemplo1ActionPerformed(evt);
            }
        });
        menExemplo.add(menIteExemplo1);

        menIteExemplo2.setMnemonic('2');
        menIteExemplo2.setText("Exemplo 2");
        menIteExemplo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteExemplo2ActionPerformed(evt);
            }
        });
        menExemplo.add(menIteExemplo2);

        mnbMenuPrincipal.add(menExemplo);

        menOperacoesAritmeticas.setMnemonic('O');
        menOperacoesAritmeticas.setText("Operações Aritméticas");

        menIteSoma.setMnemonic('S');
        menIteSoma.setText("Soma");
        menIteSoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteSomaActionPerformed(evt);
            }
        });
        menOperacoesAritmeticas.add(menIteSoma);

        menIteSubtracao.setMnemonic('u');
        menIteSubtracao.setText("Subtração");
        menIteSubtracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteSubtracaoActionPerformed(evt);
            }
        });
        menOperacoesAritmeticas.add(menIteSubtracao);

        menIteMultiplicacao.setMnemonic('M');
        menIteMultiplicacao.setText("Multiplicação");
        menIteMultiplicacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteMultiplicacaoActionPerformed(evt);
            }
        });
        menOperacoesAritmeticas.add(menIteMultiplicacao);

        menIteDivisao.setMnemonic('D');
        menIteDivisao.setText("Divisão");
        menIteDivisao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteDivisaoActionPerformed(evt);
            }
        });
        menOperacoesAritmeticas.add(menIteDivisao);

        mnbMenuPrincipal.add(menOperacoesAritmeticas);

        setJMenuBar(mnbMenuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jdpDesktop, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jdpDesktop, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //*******************************************
    
    // Abre uma nova imagem.
    private void menIteAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteAbrirActionPerformed
        // Exibe uma janela para a seleção de arquivos.
        JFileChooser selecionadorArquivo = new JFileChooser(ultimoDiretorioUtilizado);
        selecionadorArquivo.setMultiSelectionEnabled(true);
        // Se o usuário selecionou algum arquivo.
        if(selecionadorArquivo.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            // Para cada arquivo selecionado.
            for(File arquivo: selecionadorArquivo.getSelectedFiles()) {
                // Cria uma nova imagem para armazenar o arquivo.
                BufferedImage imagemLida = null;
                try {
                    imagemLida = ImageIO.read(arquivo);
                }
                catch(IOException erro) {
                    JOptionPane.showMessageDialog(rootPane, "Ocorreu um erro ao abrir o arquivo " + selecionadorArquivo.getSelectedFile().getName() + ".\nMensagem de erro: " + erro.getMessage() + ".");
                    return;
                }
                ImagemGUI imagem = new ImagemGUI(selecionadorArquivo.getSelectedFile().getAbsolutePath(), imagemLida);

                // Exibe a imagem em uma nova janela.
                adicionarImagem(imagem);
            }
            // Armazena o diretório utilizado.
            ultimoDiretorioUtilizado = selecionadorArquivo.getCurrentDirectory();
        }
    }//GEN-LAST:event_menIteAbrirActionPerformed

    // Fecha a aplicação.
    private void menIteSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteSairActionPerformed
        dispose();
    }//GEN-LAST:event_menIteSairActionPerformed

    //*******************************************
    
    // Evento de tratamento da operação de soma.
    private void menIteSomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteSomaActionPerformed
        JOptionPane.showMessageDialog(this, "Aqui você deverá implementar a operação aritmética de soma.");
    }//GEN-LAST:event_menIteSomaActionPerformed

    // Evento de tratamento da operação de subtração.
    private void menIteSubtracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteSubtracaoActionPerformed
        JOptionPane.showMessageDialog(this, "Aqui você deverá implementar a operação aritmética de subtração.");
        // Verifica se existe alguma imagem selecionada.
        if(getImagemSelecionada() == null) {
            JOptionPane.showMessageDialog(this, "Nenhuma imagem está selecionada. Selecione alguma e depois clique nesta opção novamente.");
            return;
        }
        
        // Recupera a imagem atualmente selecionada.
        ImagemGUI imagem = getImagemSelecionada();
        // Cria uma nova imagem baseada na selecionada.
        ImagemGUI novaImagem = new ImagemGUI("Nova imagem com centro verde " + (contador++), imagem);
               
        // Recupera o centro da imagem.
        int xCentro = novaImagem.getLargura()/2;
        int yCentro = novaImagem.getAltura()/2;
        // Calcula uma área relativa ao tamanho da imagem para ser pintada.
        int deltaX = novaImagem.getLargura()/4;
        int deltaY = novaImagem.getAltura()/4;
        // Pinta os pixels do centro da imagem de verde.               
        for (int x = xCentro-deltaX; x <= xCentro+deltaX; x++) {
            for (int y = yCentro-deltaY; y <= yCentro+deltaY; y++) {
                novaImagem.setRGB(x, y, 0, 255, 0);
            }
        }
        
        // Exibe a imagem criada.
        adicionarImagem(novaImagem);
    }//GEN-LAST:event_menIteSubtracaoActionPerformed

    // Evento de tratamento da operação de multiplicação.
    private void menIteMultiplicacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteMultiplicacaoActionPerformed
        JOptionPane.showMessageDialog(this, "Aqui você deverá implementar a operação aritmética de multiplicação.");
    }//GEN-LAST:event_menIteMultiplicacaoActionPerformed

    // Evento de tratamento da operação de divisão.
    private void menIteDivisaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteDivisaoActionPerformed
        JOptionPane.showMessageDialog(this, "Aqui você deverá implementar a operação aritmética de divisão.");
    }//GEN-LAST:event_menIteDivisaoActionPerformed

    // Neste exemplo, a imagem atualmente selecionada é recuperada e o centro dela é
    // pintado de verde. Perceba que a imagem não foi alterada, uma nova foi criada.
    private void menIteExemplo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteExemplo1ActionPerformed
        // Verifica se existe alguma imagem selecionada.
        if(getImagemSelecionada() == null) {
            JOptionPane.showMessageDialog(this, "Nenhuma imagem está selecionada. Selecione alguma e depois clique nesta opção novamente.");
            return;
        }
        
        // Recupera a imagem atualmente selecionada.
        ImagemGUI imagem = getImagemSelecionada();
        // Cria uma nova imagem baseada na selecionada.
        ImagemGUI novaImagem = new ImagemGUI("Nova imagem com centro verde " + (contador++), imagem);
               
        // Recupera o centro da imagem.
        int xCentro = novaImagem.getLargura()/2;
        int yCentro = novaImagem.getAltura()/2;
        // Calcula uma área relativa ao tamanho da imagem para ser pintada.
        int deltaX = novaImagem.getLargura()/4;
        int deltaY = novaImagem.getAltura()/4;
        // Pinta os pixels do centro da imagem de verde.               
        for (int x = xCentro-deltaX; x <= xCentro+deltaX; x++) {
            for (int y = yCentro-deltaY; y <= yCentro+deltaY; y++) {
                novaImagem.setRGB(x, y, 0, 255, 0);
            }
        }
        
        // Exibe a imagem criada.
        adicionarImagem(novaImagem);
    }//GEN-LAST:event_menIteExemplo1ActionPerformed

    // Salva a imagem selecionada em um arquivo.
    private void menIteSalvarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteSalvarComoActionPerformed
        // Exibe uma janela para a escolha do nome do arquivo.
        JFileChooser selecionadorArquivo = new JFileChooser(ultimoDiretorioUtilizado);
        // Adiciona a extensão JPEG.
        selecionadorArquivo.addChoosableFileFilter(new FileFilter() {
            @Override
            public String getDescription() { return "JPEG"; }
            @Override
            public boolean accept(File arquivo) {
                if(arquivo == null) { return false; }
                if(arquivo.isDirectory()) { return true; }
                return arquivo.getName().toLowerCase().endsWith("jpg");              
            }
        });
        // Adiciona a extensão PNG.
        selecionadorArquivo.addChoosableFileFilter(new FileFilter() {
            @Override
            public String getDescription() { return "PNG"; }
            @Override
            public boolean accept(File arquivo) {
                if(arquivo == null) { return false; }
                if(arquivo.isDirectory()) { return true; }
                return arquivo.getName().toLowerCase().endsWith("png");              
            }
        });
        // Adiciona a extensão GIF.
        selecionadorArquivo.addChoosableFileFilter(new FileFilter() {
            @Override
            public String getDescription() { return "GIF"; }
            @Override
            public boolean accept(File arquivo) {
                if(arquivo == null) { return false; }
                if(arquivo.isDirectory()) { return true; }
                return arquivo.getName().toLowerCase().endsWith("gif");              
            }
        });
        // Se o usuário selecionou algum arquivo.
        if(selecionadorArquivo.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            // Existe um "bug" no Windows 7 que, caso o usuário selecione uma biblioteca (Imagens etc.),
            // uma referência inválida para o sistema de arquivos é retornada.
            // Por isso, o try catch seguinte avalia este erro.
            try {
                selecionadorArquivo.getSelectedFile().getCanonicalFile();
            }
            catch(Exception erro) {
                JOptionPane.showMessageDialog(this, "Por favor, selecione outra pasta. A pasta selecionada retornou uma referência inválida pelo Sistema Operacional.\nEste é um problema comum no Windows 7 quando você seleciona uma Biblioteca (Imagens, Músicas etc.)");
                return;
            }
            
            try {
                String nomeArquivo = selecionadorArquivo.getSelectedFile().getAbsolutePath();
                if(selecionadorArquivo.getFileFilter().getDescription().equals("GIF")) {
                    if(!nomeArquivo.toLowerCase().endsWith(".gif")) { nomeArquivo += ".gif"; }
                    File arquivo = new File(nomeArquivo);
                    ImageIO.write(getImagemSelecionada().getImagem(), "GIF", arquivo);
                }
                else if(selecionadorArquivo.getFileFilter().getDescription().equals("PNG")) {
                    if(!nomeArquivo.toLowerCase().endsWith(".png")) { nomeArquivo += ".png"; }
                    File arquivo = new File(nomeArquivo);
                    ImageIO.write(getImagemSelecionada().getImagem(), "PNG", arquivo);
                }
                // JPEG é a extensão padrão.
                else {
                    if(!nomeArquivo.toLowerCase().endsWith(".jpg")) { nomeArquivo += ".jpg"; }
                    File arquivo = new File(nomeArquivo);
                    ImageIO.write(getImagemSelecionada().getImagem(), "JPEG", arquivo);                    
                }
                // Altera o nome da janela.
                getImagemSelecionada().getJanela().setTitle(nomeArquivo);
            }
            catch(IOException erro) {
                JOptionPane.showMessageDialog(this, "Ocorreu um erro ao gravar o arquivo " + selecionadorArquivo.getSelectedFile().getName() + ".\nMensagem de erro: " + erro.getMessage() + ".");
                return;
            }
            // Armazena o diretório utilizado.
            ultimoDiretorioUtilizado = selecionadorArquivo.getCurrentDirectory();
        }        
    }//GEN-LAST:event_menIteSalvarComoActionPerformed

    // Neste exemplo, é exibida uma caixa para seleção de imagens.
    // Para as imagens selecionadas, cria novas imagens com uma mistura delas.
    // Perceba que a imagem não foi alterada, uma nova foi criada.    
    private void menIteExemplo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteExemplo2ActionPerformed
       // Solicita ao usuário selecionar ao  menos duas (2) imagens.
        ImagemGUI[] imagens = selecionarImagens(2);
        
        // Se o usuário cancelou a operação.
        if(imagens == null) { return; }
        
        // Passa por todas as imagens
        for (int i = 0; i < imagens.length-1; i++) {
            // Cria uma nova imagem baseando-se na atual.
            ImagemGUI nova = new ImagemGUI("Imagem criada com a mistura de outras duas " + (contador++), imagens[i]);
            // Calcula a posição central da imagem atual.
            int meioX = nova.getLargura()/2;
            int meioY = nova.getAltura()/2;
            // Copia uma parte da próxima imagem e insere nesta.
            for (int x = 0; x < meioX && x < imagens[i+1].getLargura(); x++) {
                for (int y = 0; y < meioY && y < imagens[i+1].getAltura(); y++) {
                    // Recupera os valores de R, G e B do pixel (x,y) da imagem imagens[i+1].
                    int r = imagens[i+1].getR(x, y);
                    int g = imagens[i+1].getG(x, y);
                    int b = imagens[i+1].getB(x, y);
                    // Pinta o pixel (x,y) da imagem imagens[i] com o valor de r, g e b especificados.
                    nova.setRGB(x, y, r, g, b);
                }
            }
            adicionarImagem(nova);
        }
    }//GEN-LAST:event_menIteExemplo2ActionPerformed
    
    //*******************************************

    /**
     * Adiciona uma janela de imagem ao painel de desktop.
     * @param A imagem que deve ser exibida dentro da janela.
     */
    public void adicionarImagem(ImagemGUI imagem) {
            // Cria uma janela interna para a imagem.
            JanelaImagem janelaImagem = new JanelaImagem(imagem);
            // Adiciona a janela, a exibe e seleciona.
            jdpDesktop.add(janelaImagem);
            janelaImagem.setVisible(true);
            try {
                janelaImagem.setSelected(true);
            }
            catch(Exception erro) {}
            jdpDesktop.repaint();        
    }    
    
    /**
     * Retorna a imagem atualmente selecionada na interface gráfica.
     * @return A imagem atualmente seleciona ou null, caso nenhuma imagem esteja
     * selecionada.
     */
    public ImagemGUI getImagemSelecionada() {
        // Recupera a janela atualmente selecionada.
        JanelaImagem janelaSelecionada = (JanelaImagem) jdpDesktop.getSelectedFrame();
        // Se nenhuma janela estiver selecionada, retorna null.
        if(janelaSelecionada == null) return null;
        // Caso contrário, retorna a imagem da janela.
        return janelaSelecionada.getImagem();
    }

    /**
     * Abre uma janela de seleção de imagens e retorna as imagens selecionadas.
     * @param numeroMinimoImagens Número mínimo de imagens que devem ser
     * selecionadas.
     * @return Uma array com as imagens selecionadas ou null caso nenhuma tenha
     * sido selecionada.
     */
    public ImagemGUI[] selecionarImagens(int numeroMinimoImagens) {
        // Se não tiver nenhuma imagem aberta, avisa o usuário.
        if(jdpDesktop.getAllFrames().length == 0) {
            JOptionPane.showMessageDialog(this, "Não existem imagens abertas.");
        }
        
        // Recupera as imagens abertas.
        List<ImagemGUI> imagens = new ArrayList<ImagemGUI>();
        for(JInternalFrame frame : jdpDesktop.getAllFrames()) {
            JanelaImagem janela = (JanelaImagem) frame;
            imagens.add(janela.getImagem());
        }
        
        ImagemGUI[] todasImagens = new ImagemGUI[imagens.size()];
        imagens.toArray(todasImagens);
        SelecionadorImagens selecionador = new SelecionadorImagens(this, true, todasImagens, numeroMinimoImagens);
        selecionador.setVisible(true);
        return selecionador.getImagensSelecionadas();
    }
    
    //*******************************************
    
    // Programa principal.
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Desktop desktop = new Desktop();
                desktop.setExtendedState(JFrame.MAXIMIZED_BOTH);
                desktop.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jdpDesktop;
    private javax.swing.JMenu menArquivo;
    private javax.swing.JMenu menExemplo;
    private javax.swing.JMenuItem menIteAbrir;
    private javax.swing.JMenuItem menIteDivisao;
    private javax.swing.JMenuItem menIteExemplo1;
    private javax.swing.JMenuItem menIteExemplo2;
    private javax.swing.JMenuItem menIteMultiplicacao;
    private javax.swing.JMenuItem menIteSair;
    private javax.swing.JMenuItem menIteSalvarComo;
    private javax.swing.JMenuItem menIteSoma;
    private javax.swing.JMenuItem menIteSubtracao;
    private javax.swing.JMenu menOperacoesAritmeticas;
    private javax.swing.JMenuBar mnbMenuPrincipal;
    private javax.swing.JPopupMenu.Separator sepArquivo1;
    // End of variables declaration//GEN-END:variables

}
