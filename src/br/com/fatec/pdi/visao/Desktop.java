package br.com.fatec.pdi.visao;

import br.com.fatec.pdi.operacao.Operacao;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/*
 * Esta classe é a janela principal do projeto da disciplina Tópicos Especiais em Informática
 * (Processamento de Imagens) da Faculdade de Tecnologia de Mogi das Cruzes - Fatec.
 *
 * INSTRUÇÕES PARA O ALUNO:
 *  - Você deverá incluir itens de menu na barra de menus desta janela e implementar o tratamento
 *    de eventos para eles.
 *    O que o evento deverá fazer? Implementar alguma técnica de processamento de imagens, como
 *    a operação aritmética de adição.
 * 
 *    Na implementação das técnicas, você precisará recuperar a imagem atualmente selecionada
 *    ou mesmo solicitar ao usuário a seleção de algumas imagens. Para tanto, veja as opções seguintes:
 *    > Para recuperar a imagem atualmente selecionada, utilize o método getImagemSelecionada().
 *    > Para exibir uma caixa de seleção de imagens (utilizada para operações que necessitam de mais
 *    de uma imagem, como as operações aritméticas), utilize o método selecionarImagens(). Este método
 *    retorna uma array com as imagens selecionadas.
 * 
 *  Um exemplo de implementação de evento está disponível nos itens de menu "Exemplo 1" e
 *  "Exemplo 2". Os utilize para entender como se manipula uma imagem (como se recupera informações
 *  sobre seus pixels e como se desenha uma nova cor para os pixels).
 * 
 * @author Leandro Luque (Professor) - leandro.luque@gmail.com
 * @version 1.0
 * Created on 02/03/2012, 21:25:48
 */
public class Desktop extends javax.swing.JFrame {

    // Diretório onde o último arquivo de imagem foi aberto. Inicialmente nenhum diretório
    // está selecionado.
    // Utilizado para agilizar o processo de abertura de arquivos.
    private File ultimoDiretorioUtilizado = null;

    // Utilizado na nomeação das imagens criadas (você pode usar se quiser).
    // Veja os exemplos já citados na documentação da classe.
    private static int contador = 1;

    /**
     * Creates new form Desktop
     */
    public Desktop() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desPanDesktop = new javax.swing.JDesktopPane();
        menBarMenuPrincipal = new javax.swing.JMenuBar();
        menArquivo = new javax.swing.JMenu();
        menIteAbrir = new javax.swing.JMenuItem();
        menIteSalvarComo = new javax.swing.JMenuItem();
        sepArquivo1 = new javax.swing.JPopupMenu.Separator();
        menIteSair = new javax.swing.JMenuItem();
        menExemplo = new javax.swing.JMenu();
        menIteExemplo1 = new javax.swing.JMenuItem();
        menIteExemplo2 = new javax.swing.JMenuItem();
        menOperacoesAritmeticas = new javax.swing.JMenu();
        menIteSoma = new javax.swing.JMenuItem();
        menIteSubtracao = new javax.swing.JMenuItem();
        menIteMultiplicacao = new javax.swing.JMenuItem();
        menIteDivisao = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto da Disciplina \"Tópicos Especiais em Informática\" - Prof. Leandro Luque - Fatec Mogi das Cruzes");

        menArquivo.setMnemonic('A');
        menArquivo.setText("Arquivo");

        menIteAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menIteAbrir.setMnemonic('A');
        menIteAbrir.setText("Abrir imagem");
        menIteAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteAbrirActionPerformed(evt);
            }
        });
        menArquivo.add(menIteAbrir);
        menIteAbrir.getAccessibleContext().setAccessibleDescription("Abre uma nova imagem");

        menIteSalvarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menIteSalvarComo.setMnemonic('S');
        menIteSalvarComo.setText("Salvar imagem como");
        menIteSalvarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteSalvarComoActionPerformed(evt);
            }
        });
        menArquivo.add(menIteSalvarComo);
        menArquivo.add(sepArquivo1);

        menIteSair.setMnemonic('S');
        menIteSair.setText("Sair");
        menIteSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteSairActionPerformed(evt);
            }
        });
        menArquivo.add(menIteSair);

        menBarMenuPrincipal.add(menArquivo);

        menExemplo.setMnemonic('E');
        menExemplo.setText("Exemplo");

        menIteExemplo1.setMnemonic('1');
        menIteExemplo1.setText("Exemplo 1");
        menIteExemplo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteExemplo1ActionPerformed(evt);
            }
        });
        menExemplo.add(menIteExemplo1);

        menIteExemplo2.setMnemonic('2');
        menIteExemplo2.setText("Exemplo 2");
        menIteExemplo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteExemplo2ActionPerformed(evt);
            }
        });
        menExemplo.add(menIteExemplo2);

        menBarMenuPrincipal.add(menExemplo);

        menOperacoesAritmeticas.setMnemonic('O');
        menOperacoesAritmeticas.setText("Operações Aritméticas");

        menIteSoma.setMnemonic('S');
        menIteSoma.setText("Soma");
        menIteSoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteSomaActionPerformed(evt);
            }
        });
        menOperacoesAritmeticas.add(menIteSoma);

        menIteSubtracao.setMnemonic('u');
        menIteSubtracao.setText("Subtração");
        menIteSubtracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteSubtracaoActionPerformed(evt);
            }
        });
        menOperacoesAritmeticas.add(menIteSubtracao);

        menIteMultiplicacao.setMnemonic('M');
        menIteMultiplicacao.setText("Multiplicação");
        menIteMultiplicacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteMultiplicacaoActionPerformed(evt);
            }
        });
        menOperacoesAritmeticas.add(menIteMultiplicacao);

        menIteDivisao.setMnemonic('D');
        menIteDivisao.setText("Média");
        menIteDivisao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIteDivisaoActionPerformed(evt);
            }
        });
        menOperacoesAritmeticas.add(menIteDivisao);

        menBarMenuPrincipal.add(menOperacoesAritmeticas);

        jMenu1.setText("Outras Operações");

        jMenuItem1.setText("Encontrar diferenças");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Normalizar a imagem atual");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        menBarMenuPrincipal.add(jMenu1);

        setJMenuBar(menBarMenuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desPanDesktop, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desPanDesktop, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //*******************************************
    // Abre uma nova imagem.
    private void menIteAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteAbrirActionPerformed
        // Exibe uma janela para a seleção de arquivos.
        JFileChooser selecionadorArquivo = new JFileChooser(ultimoDiretorioUtilizado);
        selecionadorArquivo.setMultiSelectionEnabled(true);
        // Se o usuário selecionou algum arquivo.
        if (selecionadorArquivo.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            // Para cada arquivo selecionado.
            for (File arquivo : selecionadorArquivo.getSelectedFiles()) {
                // Cria uma nova imagem para armazenar o arquivo.
                BufferedImage imagemLida = null;
                try {
                    imagemLida = ImageIO.read(arquivo);
                } catch (IOException erro) {
                    JOptionPane.showMessageDialog(rootPane, "Ocorreu um erro ao abrir o arquivo " + selecionadorArquivo.getSelectedFile().getName() + ".\nMensagem de erro: " + erro.getMessage() + ".");
                    return;
                }
                ImagemGUI imagem = new ImagemGUI(selecionadorArquivo.getSelectedFile().getAbsolutePath(), imagemLida);

                // Exibe a imagem em uma nova janela.
                adicionarImagem(imagem);
            }
            // Armazena o diretório utilizado.
            ultimoDiretorioUtilizado = selecionadorArquivo.getCurrentDirectory();
        }
    }//GEN-LAST:event_menIteAbrirActionPerformed

    // Fecha a aplicação.
    private void menIteSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteSairActionPerformed
        dispose();
    }//GEN-LAST:event_menIteSairActionPerformed

    //*******************************************
    // Evento de tratamento da operação de soma.
    private void menIteSomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteSomaActionPerformed
        // Solicita ao usuário selecionar ao  menos duas (2) imagens.
        ImagemGUI[] imagens = selecionarImagens(2);

        // Se o usuário cancelou a operação.
        if (imagens == null) {
            return;
        }

        realizarOperacao(imagens, (a, b) -> a + b, false);
    }//GEN-LAST:event_menIteSomaActionPerformed

    // Evento de tratamento da operação de subtração.
    private void menIteSubtracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteSubtracaoActionPerformed
        // Solicita ao usuário selecionar ao  menos duas (2) imagens.
        ImagemGUI[] imagens = selecionarImagens(2);

        // Se o usuário cancelou a operação.
        if (imagens == null) {
            return;
        }

        realizarOperacao(imagens, (a, b) -> a - b, true);
    }//GEN-LAST:event_menIteSubtracaoActionPerformed

    // Evento de tratamento da operação de multiplicação.
    private void menIteMultiplicacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteMultiplicacaoActionPerformed
        // Solicita ao usuário selecionar ao  menos duas (2) imagens.
        ImagemGUI[] imagens = selecionarImagens(2);

        // Se o usuário cancelou a operação.
        if (imagens == null) {
            return;
        }

        realizarOperacao(imagens, (a, b) -> a * b, true);
    }//GEN-LAST:event_menIteMultiplicacaoActionPerformed

    // Evento de tratamento da operação de divisão.
    private void menIteDivisaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteDivisaoActionPerformed
        // Solicita ao usuário selecionar ao  menos duas (2) imagens.
        ImagemGUI[] imagens = selecionarImagens(2);

        // Se o usuário cancelou a operação.
        if (imagens == null) {
            return;
        }

        // Encontrar o tamanho da maior imagem.
        int largura = Integer.MIN_VALUE;
        int altura = Integer.MIN_VALUE;
        for (ImagemGUI imagem : imagens) {
            if (imagem.getLargura() > largura) {
                largura = imagem.getLargura();
            }
            if (imagem.getAltura() > altura) {
                altura = imagem.getAltura();
            }
        }

        // Criar uma matriz para armazenar o resultado da soma.
        int[][] resultadoOperacaoR = new int[altura][largura];
        int[][] resultadoOperacaoG = new int[altura][largura];
        int[][] resultadoOperacaoB = new int[altura][largura];

        int maiorR = Integer.MIN_VALUE;
        int menorR = Integer.MAX_VALUE;
        int maiorG = Integer.MIN_VALUE;
        int menorG = Integer.MAX_VALUE;
        int maiorB = Integer.MIN_VALUE;
        int menorB = Integer.MAX_VALUE;

        // Passar por todas as imagens.
        for (ImagemGUI imagem : imagens) {
            // Passar por todos os pixels.
            for (int x = 0; x < imagem.getLargura(); x++) {
                for (int y = 0; y < imagem.getAltura(); y++) {
                    // Somar os valores dos pixels e armazenar na matriz.
                    resultadoOperacaoR[y][x] += imagem.getR(x, y);
                    resultadoOperacaoG[y][x] += imagem.getG(x, y);
                    resultadoOperacaoB[y][x] += imagem.getB(x, y);
                }
            }
        }

        // Finaliza calculando a media.
        // Passar por todos os pixels.
        for (int y = 0; y < resultadoOperacaoR.length; y++) {
            for (int x = 0; x < resultadoOperacaoR[y].length; x++) {
                resultadoOperacaoR[y][x] /= imagens.length;
                resultadoOperacaoG[y][x] /= imagens.length;
                resultadoOperacaoB[y][x] /= imagens.length;
            }
        }

        // Passar por todos os pixels.
        for (int x = 0; x < resultadoOperacaoR[0].length; x++) {
            for (int y = 0; y < resultadoOperacaoR.length; y++) {
                // Somar os valores dos pixels e armazenar na matriz.
                resultadoOperacaoR[y][x] += resultadoOperacaoR[y][x];
                resultadoOperacaoG[y][x] += resultadoOperacaoG[y][x];
                resultadoOperacaoB[y][x] += resultadoOperacaoB[y][x];

                // Encontra os maiores e menores valores da cada matriz.
                if (resultadoOperacaoR[y][x] > maiorR) {
                    maiorR = resultadoOperacaoR[y][x];
                } else if (resultadoOperacaoR[y][x] < menorR) {
                    menorR = resultadoOperacaoR[y][x];
                }
                if (resultadoOperacaoG[y][x] > maiorG) {
                    maiorG = resultadoOperacaoG[y][x];
                } else if (resultadoOperacaoG[y][x] < menorG) {
                    menorG = resultadoOperacaoG[y][x];
                }
                if (resultadoOperacaoB[y][x] > maiorB) {
                    maiorB = resultadoOperacaoB[y][x];
                } else if (resultadoOperacaoB[y][x] < menorB) {
                    menorB = resultadoOperacaoB[y][x];
                }
            }
        }

        // Cria uma nova imagem baseando-se na atual.
        ImagemGUI truncada = new ImagemGUI("Imagem resultante da operacao com truncamento", largura, altura);
        ImagemGUI normalizada = new ImagemGUI("Imagem resultante da operacao com normalização", largura, altura);

        double fatorR = 255d / (maiorR - menorR);
        double fatorG = 255d / (maiorG - menorG);
        double fatorB = 255d / (maiorB - menorB);

        // Truncar e normalizar.
        for (int x = 0; x < largura; x++) {
            for (int y = 0; y < altura; y++) {
                int r, g, b;
                r = resultadoOperacaoR[y][x];
                g = resultadoOperacaoG[y][x];
                b = resultadoOperacaoB[y][x];

                if (r > 255) {
                    r = 255;
                } else if (r < 0) {
                    r = 0;
                }

                if (g > 255) {
                    g = 255;
                } else if (g < 0) {
                    g = 0;
                }

                if (b > 255) {
                    b = 255;
                } else if (b < 0) {
                    b = 0;
                }

                truncada.setRGB(x, y, r, g, b);

                r = (int) (fatorR * (resultadoOperacaoR[y][x] - menorR));
                g = (int) (fatorG * (resultadoOperacaoG[y][x] - menorG));
                b = (int) (fatorB * (resultadoOperacaoB[y][x] - menorB));

                normalizada.setRGB(x, y, r, g, b);
            }
        }

        // Pintar o resultado na imagem final.
        adicionarImagem(truncada);
        adicionarImagem(normalizada);
    }//GEN-LAST:event_menIteDivisaoActionPerformed

    // Neste exemplo, a imagem atualmente selecionada é recuperada e o centro dela é
    // pintado de verde. Perceba que a imagem não foi alterada, uma nova foi criada.
    private void menIteExemplo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteExemplo1ActionPerformed
        // Verifica se existe alguma imagem selecionada.
        if (getImagemSelecionada() == null) {
            JOptionPane.showMessageDialog(this, "Nenhuma imagem está selecionada. Selecione alguma e depois clique nesta opção novamente.");
            return;
        }

        // Recupera a imagem atualmente selecionada.
        ImagemGUI imagem = getImagemSelecionada();
        // Cria uma nova imagem baseada na selecionada.
        ImagemGUI novaImagem = new ImagemGUI("Nova imagem com centro verde " + (contador++), imagem);

        // Recupera o centro da imagem.
        int xCentro = novaImagem.getLargura() / 2;
        int yCentro = novaImagem.getAltura() / 2;
        // Calcula uma área relativa ao tamanho da imagem para ser pintada.
        int deltaX = novaImagem.getLargura() / 4;
        int deltaY = novaImagem.getAltura() / 4;
        // Pinta os pixels do centro da imagem de verde.               
        for (int x = xCentro - deltaX; x <= xCentro + deltaX; x++) {
            for (int y = yCentro - deltaY; y <= yCentro + deltaY; y++) {
                novaImagem.setRGB(x, y, 0, 255, 0);
            }
        }

        // Exibe a imagem criada.
        adicionarImagem(novaImagem);
    }//GEN-LAST:event_menIteExemplo1ActionPerformed

    // Salva a imagem selecionada em um arquivo.
    private void menIteSalvarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteSalvarComoActionPerformed
        // Exibe uma janela para a escolha do nome do arquivo.
        JFileChooser selecionadorArquivo = new JFileChooser(ultimoDiretorioUtilizado);
        // Adiciona a extensão JPEG.
        selecionadorArquivo.addChoosableFileFilter(new FileFilter() {
            @Override
            public String getDescription() {
                return "JPEG";
            }

            @Override
            public boolean accept(File arquivo) {
                if (arquivo == null) {
                    return false;
                }
                if (arquivo.isDirectory()) {
                    return true;
                }
                return arquivo.getName().toLowerCase().endsWith("jpg");
            }
        });
        // Adiciona a extensão PNG.
        selecionadorArquivo.addChoosableFileFilter(new FileFilter() {
            @Override
            public String getDescription() {
                return "PNG";
            }

            @Override
            public boolean accept(File arquivo) {
                if (arquivo == null) {
                    return false;
                }
                if (arquivo.isDirectory()) {
                    return true;
                }
                return arquivo.getName().toLowerCase().endsWith("png");
            }
        });
        // Adiciona a extensão GIF.
        selecionadorArquivo.addChoosableFileFilter(new FileFilter() {
            @Override
            public String getDescription() {
                return "GIF";
            }

            @Override
            public boolean accept(File arquivo) {
                if (arquivo == null) {
                    return false;
                }
                if (arquivo.isDirectory()) {
                    return true;
                }
                return arquivo.getName().toLowerCase().endsWith("gif");
            }
        });
        // Se o usuário selecionou algum arquivo.
        if (selecionadorArquivo.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            // Existe um "bug" no Windows 7 que, caso o usuário selecione uma biblioteca (Imagens etc.),
            // uma referência inválida para o sistema de arquivos é retornada.
            // Por isso, o try catch seguinte avalia este erro.
            try {
                selecionadorArquivo.getSelectedFile().getCanonicalFile();
            } catch (Exception erro) {
                JOptionPane.showMessageDialog(this, "Por favor, selecione outra pasta. A pasta selecionada retornou uma referência inválida pelo Sistema Operacional.\nEste é um problema comum no Windows 7 quando você seleciona uma Biblioteca (Imagens, Músicas etc.)");
                return;
            }

            try {
                String nomeArquivo = selecionadorArquivo.getSelectedFile().getAbsolutePath();
                if (selecionadorArquivo.getFileFilter().getDescription().equals("GIF")) {
                    if (!nomeArquivo.toLowerCase().endsWith(".gif")) {
                        nomeArquivo += ".gif";
                    }
                    File arquivo = new File(nomeArquivo);
                    ImageIO.write(getImagemSelecionada().getImagem(), "GIF", arquivo);
                } else if (selecionadorArquivo.getFileFilter().getDescription().equals("PNG")) {
                    if (!nomeArquivo.toLowerCase().endsWith(".png")) {
                        nomeArquivo += ".png";
                    }
                    File arquivo = new File(nomeArquivo);
                    ImageIO.write(getImagemSelecionada().getImagem(), "PNG", arquivo);
                } // JPEG é a extensão padrão.
                else {
                    if (!nomeArquivo.toLowerCase().endsWith(".jpg")) {
                        nomeArquivo += ".jpg";
                    }
                    File arquivo = new File(nomeArquivo);
                    ImageIO.write(getImagemSelecionada().getImagem(), "JPEG", arquivo);
                }
                // Altera o nome da janela.
                getImagemSelecionada().getJanela().setTitle(nomeArquivo);
            } catch (IOException erro) {
                JOptionPane.showMessageDialog(this, "Ocorreu um erro ao gravar o arquivo " + selecionadorArquivo.getSelectedFile().getName() + ".\nMensagem de erro: " + erro.getMessage() + ".");
                return;
            }
            // Armazena o diretório utilizado.
            ultimoDiretorioUtilizado = selecionadorArquivo.getCurrentDirectory();
        }
    }//GEN-LAST:event_menIteSalvarComoActionPerformed

    // Neste exemplo, é exibida uma caixa para seleção de imagens.
    // Para as imagens selecionadas, cria novas imagens com uma mistura delas.
    // Perceba que a imagem não foi alterada, uma nova foi criada.    
    private void menIteExemplo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIteExemplo2ActionPerformed
        // Solicita ao usuário selecionar ao  menos duas (2) imagens.
        ImagemGUI[] imagens = selecionarImagens(2);

        // Se o usuário cancelou a operação.
        if (imagens == null) {
            return;
        }

        // Passa por todas as imagens
        for (int i = 0; i < imagens.length - 1; i++) {
            // Cria uma nova imagem baseando-se na atual.
            ImagemGUI nova = new ImagemGUI("Imagem criada com a mistura de outras duas " + (contador++), imagens[i]);
            // Calcula a posição central da imagem atual.
            int meioX = nova.getLargura() / 2;
            int meioY = nova.getAltura() / 2;
            // Copia uma parte da próxima imagem e insere nesta.
            for (int x = 0; x < meioX && x < imagens[i + 1].getLargura(); x++) {
                for (int y = 0; y < meioY && y < imagens[i + 1].getAltura(); y++) {
                    // Recupera os valores de R, G e B do pixel (x,y) da imagem imagens[i+1].
                    int r = imagens[i + 1].getR(x, y);
                    int g = imagens[i + 1].getG(x, y);
                    int b = imagens[i + 1].getB(x, y);
                    // Pinta o pixel (x,y) da imagem imagens[i] com o valor de r, g e b especificados.
                    nova.setRGB(x, y, r, g, b);
                }
            }
            adicionarImagem(nova);
        }
    }//GEN-LAST:event_menIteExemplo2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(null, "Ishi! Vai demorar um pouco, hein! Ao final, você verá retângulos envolvendo as regiões de diferença.");

        // Solicita ao usuário selecionar ao  menos duas (2) imagens.
        ImagemGUI[] imagens = selecionarImagens(2);

        // Se o usuário cancelou a operação.
        if (imagens == null) {
            return;
        }

        // Encontrar o tamanho da maior imagem.
        int largura = Integer.MAX_VALUE;
        int altura = Integer.MAX_VALUE;
        for (ImagemGUI imagem : imagens) {
            if (imagem.getLargura() < largura) {
                largura = imagem.getLargura();
            }
            if (imagem.getAltura() < altura) {
                altura = imagem.getAltura();
            }
        }

        // Criar uma matriz para armazenar o resultado da soma.
        int[][] resultadoOperacaoR = new int[altura][largura];
        int[][] resultadoOperacaoG = new int[altura][largura];
        int[][] resultadoOperacaoB = new int[altura][largura];

        int maiorR = Integer.MIN_VALUE;
        int menorR = Integer.MAX_VALUE;
        int maiorG = Integer.MIN_VALUE;
        int menorG = Integer.MAX_VALUE;
        int maiorB = Integer.MIN_VALUE;
        int menorB = Integer.MAX_VALUE;

        // Realiza a subtração.
        for (int x = 0; x < largura; x++) {
            for (int y = 0; y < altura; y++) {
                // Somar os valores dos pixels e armazenar na matriz.
                resultadoOperacaoR[y][x] = imagens[0].getR(x, y) - imagens[1].getR(x, y);
                resultadoOperacaoG[y][x] = imagens[0].getG(x, y) - imagens[1].getG(x, y);
                resultadoOperacaoB[y][x] = imagens[0].getB(x, y) - imagens[1].getB(x, y);

                // Encontra os maiores e menores valores da cada matriz.
                if (resultadoOperacaoR[y][x] > maiorR) {
                    maiorR = resultadoOperacaoR[y][x];
                } else if (resultadoOperacaoR[y][x] < menorR) {
                    menorR = resultadoOperacaoR[y][x];
                }
                if (resultadoOperacaoG[y][x] > maiorG) {
                    maiorG = resultadoOperacaoG[y][x];
                } else if (resultadoOperacaoG[y][x] < menorG) {
                    menorG = resultadoOperacaoG[y][x];
                }
                if (resultadoOperacaoB[y][x] > maiorB) {
                    maiorB = resultadoOperacaoB[y][x];
                } else if (resultadoOperacaoB[y][x] < menorB) {
                    menorB = resultadoOperacaoB[y][x];
                }
            }
        }

        // Cria uma nova imagem baseando-se na atual.
        ImagemGUI truncada = new ImagemGUI("Imagem resultante da operacao com truncamento", largura, altura);
        ImagemGUI normalizada = new ImagemGUI("Imagem resultante da operacao com normalização", largura, altura);

        double fatorR = 255d / (maiorR - menorR);
        double fatorG = 255d / (maiorG - menorG);
        double fatorB = 255d / (maiorB - menorB);

        // Truncar e normalizar.
        for (int x = 0; x < largura; x++) {
            for (int y = 0; y < altura; y++) {
                int r, g, b;
                r = resultadoOperacaoR[y][x];
                g = resultadoOperacaoG[y][x];
                b = resultadoOperacaoB[y][x];

                if (r > 255) {
                    r = 255;
                } else if (r < 0) {
                    r = 0;
                }

                if (g > 255) {
                    g = 255;
                } else if (g < 0) {
                    g = 0;
                }

                if (b > 255) {
                    b = 255;
                } else if (b < 0) {
                    b = 0;
                }

                truncada.setRGB(x, y, r, g, b);

                r = (int) (fatorR * (resultadoOperacaoR[y][x] - menorR));
                g = (int) (fatorG * (resultadoOperacaoG[y][x] - menorG));
                b = (int) (fatorB * (resultadoOperacaoB[y][x] - menorB));

                normalizada.setRGB(x, y, r, g, b);
            }
        }

        // Pintar o resultado na imagem final.
        //adicionarImagem(truncada);
        //adicionarImagem(normalizada);
        int[] corMaisFrequente = encontrarCorMaisFrequente(normalizada);

        ImagemGUI normalizadaComFundoIdentificado = new ImagemGUI("Imagem resultante da operacao com normalização, com fundo identificado", normalizada);

        int delta = 10;
        for (int x = 0; x < normalizada.getLargura(); x++) {
            for (int y = 0; y < normalizada.getAltura(); y++) {
                if (normalizada.getR(x, y) > corMaisFrequente[0] - delta && normalizada.getR(x, y) < corMaisFrequente[0] + delta
                        && normalizada.getG(x, y) > corMaisFrequente[1] - delta
                        && normalizada.getG(x, y) < corMaisFrequente[1] + delta
                        && normalizada.getB(x, y) > corMaisFrequente[2] - delta
                        && normalizada.getB(x, y) < corMaisFrequente[2] + delta) {
                    normalizadaComFundoIdentificado.setRGB(x, y, 0, 0, 0);
                }
            }
        }
        //adicionarImagem(normalizadaComFundoIdentificado);

        ImagemGUI comRegioesIdentificadas = new ImagemGUI("Imagem com regiões identificadas", largura, altura);

        boolean[][] jaVisitados = new boolean[normalizadaComFundoIdentificado.getAltura()][normalizadaComFundoIdentificado.getLargura()];

        // Usar algoritmo de Flood-Fill para identificar regiões.
        for (int x = 0; x < normalizadaComFundoIdentificado.getLargura(); x++) {
            for (int y = 0; y < normalizadaComFundoIdentificado.getAltura(); y++) {
                if (normalizadaComFundoIdentificado.getR(x, y) != 0
                        && normalizadaComFundoIdentificado.getG(x, y) != 0
                        && normalizadaComFundoIdentificado.getB(x, y) != 0
                        && !jaVisitados[y][x]) {

                    //     List<int[]> pixelsDoConjunto = new ArrayList<int[]>();
                    Stack<int[]> aVisitar = new Stack<int[]>();

                    int corRAleatoria = (int) (255 * Math.random());
                    int corGAleatoria = (int) (255 * Math.random());
                    int corBAleatoria = (int) (255 * Math.random());

                    int menorX = Integer.MAX_VALUE;
                    int menorY = Integer.MAX_VALUE;
                    int maiorX = Integer.MIN_VALUE;
                    int maiorY = Integer.MIN_VALUE;

                    aVisitar.push(new int[]{x, y});
                    while (!aVisitar.isEmpty()) {

                        int[] pixelAVisitar = aVisitar.pop();
                        int pixelX = pixelAVisitar[0];
                        int pixelY = pixelAVisitar[1];
                        jaVisitados[pixelY][pixelX] = true;

                        if (pixelX < menorX) {
                            menorX = pixelX;
                        }
                        if (pixelX > maiorX) {
                            maiorX = pixelX;
                        }
                        if (pixelY < menorY) {
                            menorY = pixelY;
                        }
                        if (pixelY > maiorY) {
                            maiorY = pixelY;
                        }

                        //    pixelsDoConjunto.add(pixelAVisitar);
                        //   comRegioesIdentificadas.setRGB(pixelX, pixelY, corRAleatoria, corGAleatoria, corBAleatoria);
                        for (int deltaX = -10; deltaX <= 10; deltaX++) {
                            for (int deltaY = -10; deltaY <= 10; deltaY++) {
                                if (normalizadaComFundoIdentificado.getR(pixelX + deltaX, pixelY + deltaY) != 0
                                        && normalizadaComFundoIdentificado.getG(pixelX + deltaX, pixelY + deltaY) != 0
                                        && normalizadaComFundoIdentificado.getB(pixelX + deltaX, pixelY + deltaY) != 0
                                        && !jaVisitados[pixelY + deltaY][pixelX + deltaX]) {
                                    aVisitar.push(new int[]{pixelX + deltaX, pixelY + deltaY});
                                }
                            }
                        }

                    } // Fim do processamento da pilha.

                    // Desenha um retângulo em torno da região de diferença.
                    for (int xAtual = menorX; xAtual <= maiorX; xAtual++) {
                        for (int yAtual = menorY; yAtual <= maiorY; yAtual++) {
                            comRegioesIdentificadas.setRGB(xAtual, Math.max(0, menorY - 1), corRAleatoria, corGAleatoria, corBAleatoria);
                            comRegioesIdentificadas.setRGB(xAtual, menorY, corRAleatoria, corGAleatoria, corBAleatoria);
                            comRegioesIdentificadas.setRGB(xAtual, Math.min(maiorY, altura - 1), corRAleatoria, corGAleatoria, corBAleatoria);
                            comRegioesIdentificadas.setRGB(xAtual, maiorY, corRAleatoria, corGAleatoria, corBAleatoria);
                            comRegioesIdentificadas.setRGB(menorX, yAtual, corRAleatoria, corGAleatoria, corBAleatoria);
                            comRegioesIdentificadas.setRGB(Math.max(menorX, 0), yAtual, corRAleatoria, corGAleatoria, corBAleatoria);
                            comRegioesIdentificadas.setRGB(maiorX, yAtual, corRAleatoria, corGAleatoria, corBAleatoria);
                            comRegioesIdentificadas.setRGB(Math.min(maiorX, largura - 1), yAtual, corRAleatoria, corGAleatoria, corBAleatoria);
                        }
                    }

                }
            }
        }

        adicionarImagem(comRegioesIdentificadas);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        ImagemGUI imagem = getImagemSelecionada();

        if (null == imagem) {
            return;
        }

        // Encontra os maiores e menores valores das matrizes.
        int maiorR = Integer.MIN_VALUE;
        int menorR = Integer.MAX_VALUE;
        int maiorG = Integer.MIN_VALUE;
        int menorG = Integer.MAX_VALUE;
        int maiorB = Integer.MIN_VALUE;
        int menorB = Integer.MAX_VALUE;
        for (int x = 0; x < imagem.getLargura(); x++) {
            for (int y = 0; y < imagem.getAltura(); y++) {
                if (imagem.getR(x, y) > maiorR) {
                    maiorR = imagem.getR(x, y);
                } else if (imagem.getR(x, y) < menorR) {
                    menorR = imagem.getR(x, y);
                }
                if (imagem.getG(x, y) > maiorG) {
                    maiorG = imagem.getG(x, y);
                } else if (imagem.getG(x, y) < menorG) {
                    menorG = imagem.getG(x, y);
                }
                if (imagem.getB(x, y) > maiorB) {
                    maiorB = imagem.getB(x, y);
                } else if (imagem.getB(x, y) < menorB) {
                    menorB = imagem.getB(x, y);
                }
            }
        }

        // Cria uma nova imagem baseando-se na atual.
        ImagemGUI normalizada = new ImagemGUI("Imagem resultante da operacao com normalização", imagem);

        double fatorR = 255d / (maiorR - menorR);
        double fatorG = 255d / (maiorG - menorG);
        double fatorB = 255d / (maiorB - menorB);

        // Truncar e normalizar.
        for (int x = 0; x < imagem.getLargura(); x++) {
            for (int y = 0; y < imagem.getAltura(); y++) {
                int r, g, b;
                r = imagem.getR(x, y);
                g = imagem.getG(x, y);
                b = imagem.getB(x, y);

                r = (int) (fatorR * (r - menorR));
                g = (int) (fatorG * (g - menorG));
                b = (int) (fatorB * (b - menorB));

                normalizada.setRGB(x, y, r, g, b);
            }
        }

        // Pintar o resultado na imagem final.
        adicionarImagem(normalizada);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    //*******************************************
    /**
     * Adiciona uma janela de imagem ao painel de desktop.
     *
     * @param A imagem que deve ser exibida dentro da janela.
     */
    public void adicionarImagem(ImagemGUI imagem) {
        // Cria uma janela interna para a imagem.
        JanelaImagem janelaImagem = new JanelaImagem(imagem);
        // Adiciona a janela, a exibe e seleciona.
        desPanDesktop.add(janelaImagem);
        janelaImagem.setVisible(true);
        try {
            janelaImagem.setSelected(true);
        } catch (Exception erro) {
        }
        desPanDesktop.repaint();
    }

    /**
     * Retorna a imagem atualmente selecionada na interface gráfica.
     *
     * @return A imagem atualmente seleciona ou null, caso nenhuma imagem esteja
     * selecionada.
     */
    public ImagemGUI getImagemSelecionada() {
        // Recupera a janela atualmente selecionada.
        JanelaImagem janelaSelecionada = (JanelaImagem) desPanDesktop.getSelectedFrame();
        // Se nenhuma janela estiver selecionada, retorna null.
        if (janelaSelecionada == null) {
            return null;
        }
        // Caso contrário, retorna a imagem da janela.
        return janelaSelecionada.getImagem();
    }

    /**
     * Abre uma janela de seleção de imagens e retorna as imagens selecionadas.
     *
     * @param numeroMinimoImagens Número mínimo de imagens que devem ser
     * selecionadas.
     * @return Uma array com as imagens selecionadas ou null caso nenhuma tenha
     * sido selecionada.
     */
    public ImagemGUI[] selecionarImagens(int numeroMinimoImagens) {
        // Se não tiver nenhuma imagem aberta, avisa o usuário.
        if (desPanDesktop.getAllFrames().length == 0) {
            JOptionPane.showMessageDialog(this, "Não existem imagens abertas.");
        }

        // Recupera as imagens abertas.
        List<ImagemGUI> imagens = new ArrayList<ImagemGUI>();
        for (JInternalFrame frame : desPanDesktop.getAllFrames()) {
            JanelaImagem janela = (JanelaImagem) frame;
            imagens.add(janela.getImagem());
        }

        ImagemGUI[] todasImagens = new ImagemGUI[imagens.size()];
        imagens.toArray(todasImagens);
        SelecionadorImagens selecionador = new SelecionadorImagens(this, true, todasImagens, numeroMinimoImagens);
        selecionador.setVisible(true);
        return selecionador.getImagensSelecionadas();
    }

    //*******************************************
    // Programa principal.
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Desktop desktop = new Desktop();
                desktop.setExtendedState(JFrame.MAXIMIZED_BOTH);
                desktop.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desPanDesktop;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenu menArquivo;
    private javax.swing.JMenuBar menBarMenuPrincipal;
    private javax.swing.JMenu menExemplo;
    private javax.swing.JMenuItem menIteAbrir;
    private javax.swing.JMenuItem menIteDivisao;
    private javax.swing.JMenuItem menIteExemplo1;
    private javax.swing.JMenuItem menIteExemplo2;
    private javax.swing.JMenuItem menIteMultiplicacao;
    private javax.swing.JMenuItem menIteSair;
    private javax.swing.JMenuItem menIteSalvarComo;
    private javax.swing.JMenuItem menIteSoma;
    private javax.swing.JMenuItem menIteSubtracao;
    private javax.swing.JMenu menOperacoesAritmeticas;
    private javax.swing.JPopupMenu.Separator sepArquivo1;
    // End of variables declaration//GEN-END:variables

    private void realizarOperacao(ImagemGUI[] imagens, Operacao operacao, boolean inicializarMatrizComPrimeiraImagem) {
        // Encontrar o tamanho da maior imagem dentre as imagens.
        int largura = Arrays.stream(imagens).mapToInt(i -> i.getLargura()).max().getAsInt();
        int altura = Arrays.stream(imagens).mapToInt(i -> i.getAltura()).max().getAsInt();

        // Cria uma matriz para armazenar o resultado das operações.
        int[][] resultadoOperacaoR = new int[altura][largura];
        int[][] resultadoOperacaoG = new int[altura][largura];
        int[][] resultadoOperacaoB = new int[altura][largura];

        int maiorR = Integer.MIN_VALUE;
        int menorR = Integer.MAX_VALUE;
        int maiorG = Integer.MIN_VALUE;
        int menorG = Integer.MAX_VALUE;
        int maiorB = Integer.MIN_VALUE;
        int menorB = Integer.MAX_VALUE;

        int i = 0;
        if (inicializarMatrizComPrimeiraImagem) {
            i = 1;
            for (int x = 0; x < imagens[0].getLargura(); x++) {
                for (int y = 0; y < imagens[0].getAltura(); y++) {
                    // Somar os valores dos pixels e armazenar na matriz.
                    resultadoOperacaoR[y][x] = imagens[0].getR(x, y);
                    resultadoOperacaoG[y][x] = imagens[0].getG(x, y);
                    resultadoOperacaoB[y][x] = imagens[0].getB(x, y);
                }
            }
        }

        // Passar por todas as imagens.
        for (int j = i; j < imagens.length; j++) {
            ImagemGUI imagem = imagens[j];
            // Passar por todos os pixels.
            for (int x = 0; x < imagem.getLargura(); x++) {
                for (int y = 0; y < imagem.getAltura(); y++) {
                    // Somar os valores dos pixels e armazenar na matriz.
                    resultadoOperacaoR[y][x] = (int) operacao.realizar(resultadoOperacaoR[y][x], imagem.getR(x, y));
                    resultadoOperacaoG[y][x] = (int) operacao.realizar(resultadoOperacaoG[y][x], imagem.getG(x, y));
                    resultadoOperacaoB[y][x] = (int) operacao.realizar(resultadoOperacaoB[y][x], imagem.getB(x, y));

                    // Encontra os maiores e menores valores da cada matriz.
                    if (resultadoOperacaoR[y][x] > maiorR) {
                        maiorR = resultadoOperacaoR[y][x];
                    } else if (resultadoOperacaoR[y][x] < menorR) {
                        menorR = resultadoOperacaoR[y][x];
                    }
                    if (resultadoOperacaoG[y][x] > maiorG) {
                        maiorG = resultadoOperacaoG[y][x];
                    } else if (resultadoOperacaoG[y][x] < menorG) {
                        menorG = resultadoOperacaoG[y][x];
                    }
                    if (resultadoOperacaoB[y][x] > maiorB) {
                        maiorB = resultadoOperacaoB[y][x];
                    } else if (resultadoOperacaoB[y][x] < menorB) {
                        menorB = resultadoOperacaoB[y][x];
                    }
                }
            }
        }

        // Cria uma nova imagem baseando-se na atual.
        ImagemGUI truncada = new ImagemGUI("Imagem resultante da operacao com truncamento", largura, altura);
        ImagemGUI normalizada = new ImagemGUI("Imagem resultante da operacao com normalização", largura, altura);

        double fatorR = 255d / (maiorR - menorR);
        double fatorG = 255d / (maiorG - menorG);
        double fatorB = 255d / (maiorB - menorB);

        // Truncar e normalizar.
        for (int x = 0; x < largura; x++) {
            for (int y = 0; y < altura; y++) {
                int r, g, b;
                r = resultadoOperacaoR[y][x];
                g = resultadoOperacaoG[y][x];
                b = resultadoOperacaoB[y][x];

                if (r > 255) {
                    r = 255;
                } else if (r < 0) {
                    r = 0;
                }

                if (g > 255) {
                    g = 255;
                } else if (g < 0) {
                    g = 0;
                }

                if (b > 255) {
                    b = 255;
                } else if (b < 0) {
                    b = 0;
                }

                truncada.setRGB(x, y, r, g, b);

                r = (int) (fatorR * (resultadoOperacaoR[y][x] - menorR));
                g = (int) (fatorG * (resultadoOperacaoG[y][x] - menorG));
                b = (int) (fatorB * (resultadoOperacaoB[y][x] - menorB));

                normalizada.setRGB(x, y, r, g, b);
            }
        }

        // Pintar o resultado na imagem final.
        adicionarImagem(truncada);
        adicionarImagem(normalizada);
    }

    private int getR(ImagemGUI imagem, int x, int y) {
        if (x >= imagem.getLargura() || y >= imagem.getAltura()) {
            return 0;
        }
        return imagem.getR(x, y);
    }

    private int getG(ImagemGUI imagem, int x, int y) {
        if (x >= imagem.getLargura() || y >= imagem.getAltura()) {
            return 0;
        }
        return imagem.getG(x, y);
    }

    private int getB(ImagemGUI imagem, int x, int y) {
        if (x >= imagem.getLargura() || y >= imagem.getAltura()) {
            return 0;
        }
        return imagem.getB(x, y);
    }

    public int[] encontrarCorMaisFrequente(ImagemGUI imagem) {
        int[] quantidadeDePixelsPorCorR = new int[256];
        int[] quantidadeDePixelsPorCorG = new int[256];
        int[] quantidadeDePixelsPorCorB = new int[256];

        for (int x = 0; x < imagem.getLargura(); x++) {
            for (int y = 0; y < imagem.getAltura(); y++) {

                quantidadeDePixelsPorCorR[imagem.getR(x, y)]++;
                quantidadeDePixelsPorCorG[imagem.getG(x, y)]++;
                quantidadeDePixelsPorCorB[imagem.getB(x, y)]++;

            }
        }

        int maisFrequenteR = 0;
        int quantosR = 0;
        int maisFrequenteG = 0;
        int quantosG = 0;
        int maisFrequenteB = 0;
        int quantosB = 0;
        for (int i = 0; i < quantidadeDePixelsPorCorR.length; i++) {
            if (quantidadeDePixelsPorCorR[i] > quantosR) {
                quantosR = quantidadeDePixelsPorCorR[i];
                maisFrequenteR = i;
            }
            if (quantidadeDePixelsPorCorG[i] > quantosG) {
                quantosG = quantidadeDePixelsPorCorG[i];
                maisFrequenteG = i;
            }
            if (quantidadeDePixelsPorCorB[i] > quantosB) {
                quantosB = quantidadeDePixelsPorCorB[i];
                maisFrequenteB = i;
            }
        }
        return new int[]{maisFrequenteR, maisFrequenteG, maisFrequenteB};
    }
    
}
