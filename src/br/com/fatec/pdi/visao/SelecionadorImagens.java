package br.com.fatec.pdi.visao;

import java.awt.GridLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * Esta classe implementa uma interface para a seleção de múltiplas imagens
 * 
 * @author Leandro Luque (Professor) - leandro.luque@gmail.com
 * @version 1.0
 */
public class SelecionadorImagens extends javax.swing.JDialog {

    // Imagens que podem ser selecionadas.
    ImagemGUI[] imagens;
    
    // Caixas de verificação das imagens.
    List<JCheckBox> caixasVerificacao = new ArrayList<JCheckBox>();

    // Número mínimo de imagens que devem ser selecionadas.
    private int numeroMinimo;
    
    /**
     * Creates new form SelecionadorImagens
     */
    public SelecionadorImagens(java.awt.Frame parent, boolean modal, ImagemGUI[] imagens, int numeroMinimo) {
        super(parent, modal);
        initComponents();
        this.imagens = imagens;
        this.numeroMinimo = numeroMinimo;
        
        // Exibir imagens.
        exibirImagens();
    }
    
    // Exibe as imagens enviadas.
    private void exibirImagens() {
        JPanel panImagens = new JPanel(new GridLayout(0,4));
        scrPanImagens.setViewportView(panImagens);
        // Para cada imagem, cria um painel com uma caixa de verificação e
        // a imagem.
        for(ImagemGUI imagem : this.imagens) {
            JPanel panImagem = new JPanel();
            JCheckBox caixaImagem = new JCheckBox();
            panImagem.add(caixaImagem);
            JLabel miniatura = new JLabel(new ImageIcon(criarMiniatura(imagem.getImagem())));
            panImagem.add(miniatura);
            caixaImagem.putClientProperty("imagem", imagem);
            this.caixasVerificacao.add(caixaImagem);
            panImagens.add(panImagem);
        }        
        panImagens.revalidate();
    }

    // Retorna uma miniatura da imagem especificada.
    public Image criarMiniatura(BufferedImage imagem) {
        // Calcula o tamanho da miniatura, sabendo que, no máximo ela deverá ter 100 de altura
        // e 100 de largura.
        int largura = 100;
        int altura = 100;
        // Se a largura for maior que a altura.
        if(imagem.getWidth()>imagem.getHeight()) {
            altura *= (((double)imagem.getHeight())/imagem.getWidth());
        }
        else if(imagem.getHeight()>imagem.getWidth()) {
            largura *= (((double)imagem.getWidth())/imagem.getHeight());
        }
        return imagem.getScaledInstance(largura, altura, Image.SCALE_SMOOTH);
    }
    
    /**
     * Retorna as imagens selecionadas pelo usuário.
     * @return Uma lista com as imagens selecionadas pelo usuário.
     */
    public ImagemGUI[] getImagensSelecionadas() {
        List<ImagemGUI> imagens = new ArrayList<ImagemGUI>();
        for(JCheckBox caixa : this.caixasVerificacao) {
            if(caixa.isSelected()) {
                imagens.add((ImagemGUI)caixa.getClientProperty("imagem"));
            }
        }       
        ImagemGUI[] selecionadas = null;
        if(imagens.size() > 0) {
            selecionadas = new ImagemGUI[imagens.size()];
            imagens.toArray(selecionadas);
        }
               
        return selecionadas;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labAjuda = new javax.swing.JLabel();
        scrPanImagens = new javax.swing.JScrollPane();
        butConfirmar = new javax.swing.JButton();
        butCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seleção de Imagens");

        labAjuda.setText("<html><p>Selecione, na lista seguinte, todas as imagens para as quais você deseja aplicar a operação selecionada.</p><p>Em seguida, selecione a opção Confirmar.</p></html>");

        scrPanImagens.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrPanImagens.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        butConfirmar.setMnemonic('C');
        butConfirmar.setText("Confirmar");
        butConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConfirmarActionPerformed(evt);
            }
        });

        butCancelar.setMnemonic('a');
        butCancelar.setText("Cancelar");
        butCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labAjuda)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(butConfirmar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butCancelar))
                    .addComponent(scrPanImagens))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labAjuda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrPanImagens, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butConfirmar)
                    .addComponent(butCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Cancela a operação
    private void butCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelarActionPerformed
        JOptionPane.showMessageDialog(this, "A operação foi cancelada.");
        dispose();
    }//GEN-LAST:event_butCancelarActionPerformed

    // Confirma a operação.
    private void butConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConfirmarActionPerformed
        // Se nenhuma imagem foi selecionada.
        ImagemGUI[] selecionadas = getImagensSelecionadas();
        if(selecionadas == null || selecionadas.length < numeroMinimo) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione ao menos " + this.numeroMinimo + " imagem(ns) antes de continuar.");
            return;
        }
        dispose();
    }//GEN-LAST:event_butConfirmarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCancelar;
    private javax.swing.JButton butConfirmar;
    private javax.swing.JLabel labAjuda;
    private javax.swing.JScrollPane scrPanImagens;
    // End of variables declaration//GEN-END:variables
}
